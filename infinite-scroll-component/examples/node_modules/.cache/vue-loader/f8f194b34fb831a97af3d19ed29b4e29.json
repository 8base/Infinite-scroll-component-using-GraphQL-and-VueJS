{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sebastian/Code/8base/tutorials/infinite-scroll-pagination-component-using-graphql-and-vuejs/infinite-scroll-component-2/examples/default.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sebastian/Code/8base/tutorials/infinite-scroll-pagination-component-using-graphql-and-vuejs/infinite-scroll-component-2/examples/default.vue","mtime":1574272476998},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBXZSd2ZSBnb3QgdG8gaW1wb3J0IG91ciBpbmZpbml0ZSBzY3JvbGwgY29tcG9uZW50ISAKICovCmltcG9ydCB7IEluZmluaXRlU2Nyb2xsIH0gZnJvbSAnaW5maW5pdGUtc2Nyb2xsLWNvbXBvbmVudC0yJzsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIC8qKgogICAgICogUmVnaXN0ZXJpbmcgdGhlIGNvbXBvbmVudCB3aWxsIGFsbG93IHVzIHRvCiAgICAgKiB1c2UgaXQgaW4gb3VyIHRlbXBsYXRlLCBhcyBpcyBzaG93biBhYm92ZS4KICAgICAqLyAKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBJbmZpbml0ZVNjcm9sbAogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEhlcmUgd2UndmUgYWRkaW5nIHRoZSB2YWx1ZXMgdG8gdGhhdCBhcmUKICAgICAgICAgICAgICogZ2V0dGluZyBwYXNzZWQgdG8gdGhlIEluZmluaXRlU2Nyb2xsCiAgICAgICAgICAgICAqIGNvbW9uZW50LiBUaGV5IGNvdWxkIGJlIGRpcmVjdGx5IGFkZGVkIGluLCAKICAgICAgICAgICAgICogdGhlIHRlbXBsYXRlLCB0aG91Z2ggYXJlIGJldHRlciBvcmdhbml6ZWQKICAgICAgICAgICAgICogaW4gdGhlIGRhdGEgbWV0aG9kIGxpa2UgdGhpcy4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGxpbWl0OiAyNSwKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIERlcGVuZGluZyBvbiB0aGUgQVBJLCB0aGUgcmV0dXJuZWQgcmVjb3JkcyBtYXkgYmUKICAgICAgICAgICAgICogbmVzdGVkIGluIHRoZSByZXNwb25zZSBvYmplY3QuIFRoaXMga2V5IGlzIG9wdGlvbmFsCiAgICAgICAgICAgICAqIHRob3VnaCBjYW4gYmUgdXNlZCBmb3IgYWNjZXNzaW5nIGEgbmVzdGVkIGxpc3QuCiAgICAgICAgICAgICAqLwogICAgICAgICAgICByZXNwS2V5OiAnYXJ0aWNsZXNMaXN0Lml0ZW1zJywKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIE9wdGlvbmFsIGF1dGggdG9rZW4sIGRlcGVuZGluZyBvbiBHcmFwaFFMIEFQSQogICAgICAgICAgICAgKiBSRVBMQUNFIElUIFdJVEggWU9VUiBBUEkgVE9LRU4KICAgICAgICAgICAgICovIAogICAgICAgICAgICBhdXRoVG9rZW46ICc3Y2E5MzU3ZS00M2NjLTQ4ODEtOGQyNS0wZWIwMzUxOTQxNTUnLAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogUmVxdWlyZWQgR3JhcGhRTCBBUEkgZW5kcG9pbnQgZnJvbSB3aGVyZSByZWNvcmRzIGdldCBmZXRjaGVkLgogICAgICAgICAgICAgKiBSRVBMQUNFIElUIFdJVEggWU9VUiBXT1JLU1BBQ0UgQVBJIEVORFBPSU5UCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBlbmRwb2ludDogJ2h0dHBzOi8vYXBpLjhiYXNlLmNvbS9jazBzOTFyZHYwMDBrMDFsNDY4OTA5aDVuJywKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFJlcXVpcmVkIEdyYXBoUUwgcXVlcnkgZm9yIGZldGNoaW5nIHJlY29yZHMuIFRoaXMgcXVlcnkKICAgICAgICAgICAgICogaXMgZGVzaWduZWQgZm9yIG91ciA4YmFzZSBBUEkgYW5kIHdpbGwgcmV0dXJuIHRoZSBwYWdpbmF0ZWQKICAgICAgICAgICAgICogcmVzdWx0cyBmcm9tIG91ciBhcnRpY2xlcyB0YWJsZS4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIHF1ZXJ5OiBgcXVlcnkoJGxpbWl0OiBJbnQsICRza2lwOiBJbnQpIHsKICAgICAgICAgICAgICAgIGFydGljbGVzTGlzdChmaXJzdDogJGxpbWl0LCBza2lwOiAkc2tpcCkgewogICAgICAgICAgICAgICAgICAgIGl0ZW1zIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQKICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUKICAgICAgICAgICAgICAgICAgICAgICAgYm9keQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfWAKICAgICAgICB9CiAgICB9Cn07Cg=="},{"version":3,"sources":["default.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"default.vue","sourceRoot":".","sourcesContent":["<style scoped>\n* {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n.container {\n  margin: 0 auto;\n  width: 420px;\n}\n</style>\n\n<template>\n    <!-- \n      Here's our InfiniteScroll component. We want to pass it some simple\n      props so that the component knows... \n        \n      1) query: The GraphQL query to run. \n      2) limit: How many records to fetch.\n      3) respKey: A key for accessing the response.\n      3) endpoint: Where to fetch the records from.\n      4) authToken: If needed, a token to access the API.\n     -->\n     <section class=\"container\"> \n      <InfiniteScroll \n          :query=\"query\"\n          :limit=\"limit\" \n          :respKey=\"respKey\" \n          :endpoint=\"endpoint\" \n          :authToken=\"authToken\">\n          <!-- \n            Instead of being stuck with a generic template, we want to\n            be able to render out each record that gets fetched with a\n            custom template. \n            \n            1) Using v-slot we can name the scoped data that's passed to the template.\n            2) The template is a child component of InfiniteScrollm so we can access it using <slot />\n          -->\n          <template v-slot=\"item\">\n              <!-- \n                Using the scoped slot data, we're creating a simple template \n                that will render out the wanted data from our fetched records.\n                -->\n              <article>\n                <h4>{{ item.title }}</h4>\n                <p>{{ item.body }}</p>\n              </article>\n          </template>\n      </InfiniteScroll>\n    </section>\n</template>\n\n<script>\n/**\n * We've got to import our infinite scroll component! \n */\nimport { InfiniteScroll } from 'infinite-scroll-component-2';\n\nexport default {\n    /**\n     * Registering the component will allow us to\n     * use it in our template, as is shown above.\n     */ \n    components: {\n        InfiniteScroll\n    },\n    data() {\n        return {\n            /**\n             * Here we've adding the values to that are\n             * getting passed to the InfiniteScroll\n             * comonent. They could be directly added in, \n             * the template, though are better organized\n             * in the data method like this.\n             */\n            limit: 25,\n            /**\n             * Depending on the API, the returned records may be\n             * nested in the response object. This key is optional\n             * though can be used for accessing a nested list.\n             */\n            respKey: 'articlesList.items',\n            /**\n             * Optional auth token, depending on GraphQL API\n             * REPLACE IT WITH YOUR API TOKEN\n             */ \n            authToken: '7ca9357e-43cc-4881-8d25-0eb035194155',\n            /**\n             * Required GraphQL API endpoint from where records get fetched.\n             * REPLACE IT WITH YOUR WORKSPACE API ENDPOINT\n             */\n            endpoint: 'https://api.8base.com/ck0s91rdv000k01l468909h5n',\n            /**\n             * Required GraphQL query for fetching records. This query\n             * is designed for our 8base API and will return the paginated\n             * results from our articles table.\n             */\n            query: `query($limit: Int, $skip: Int) {\n                articlesList(first: $limit, skip: $skip) {\n                    items {\n                        id\n                        title\n                        body\n                    }\n                }\n            }`\n        }\n    }\n};\n</script>\n"]}]}