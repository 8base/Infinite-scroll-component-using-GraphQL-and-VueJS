{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sebastian/Code/8base/tutorials/infinite-scroll-pagination-component-using-graphql-and-vuejs/infinite-scroll-component-2/infiniteScroll.vue?vue&type=style&index=0&id=1d5be28f&scoped=true&lang=css&","dependencies":[{"path":"/Users/sebastian/Code/8base/tutorials/infinite-scroll-pagination-component-using-graphql-and-vuejs/infinite-scroll-component-2/infiniteScroll.vue","mtime":1574273154907},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qKgogKiBTb21lIG9mIHRoZSBzdHlsaW5nIGlzIGZ1bmN0aW9uYWwsIHdoaWxlIG90aGVyCiAqIGlzIGFlc3RoZXRpYy4gRmVlbCBmcmVlIHRvIHBsYXkgd2l0aCBpdCEKICovCnNlY3Rpb24gewogIG92ZXJmbG93LXk6IHNjcm9sbDsKICBoZWlnaHQ6IDUwMHB4Owp9Cg=="},{"version":3,"sources":["infiniteScroll.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"infiniteScroll.vue","sourceRoot":"..","sourcesContent":["<style scoped>\n/**\n * Some of the styling is functional, while other\n * is aesthetic. Feel free to play with it!\n */\nsection {\n  overflow-y: scroll;\n  height: 500px;\n}\n</style>\n\n<template>\n  <!-- \n    Component container with scroll event listener\n    for triggering handle scroll event.\n  -->\n  <section @scroll=\"handleScroll\">\n    <!--\n      For every item in the items array, render\n      the slotted template and bind the item data.\n     -->\n    <slot v-for=\"item in items\" v-bind=\"item\" />\n  </section>\n</template>\n\n<script>\n/* eslint-disable no-console */\n\n/* Imports the graphQL request client */\nimport { GraphQLClient } from \"graphql-request\";\n\nexport default {\n  /**\n   * Declare the props expected to be passed from\n   * any parent component (the ones in Dev.vue).\n   */\n  props: {\n    query: {\n      type: String,\n      required: true\n    },\n    respKey: {\n      type: String,\n      default: \"\"\n    },\n    limit: {\n      type: Number,\n      default: 25\n    },\n    endpoint: {\n      type: String,\n      required: true\n    },\n    authToken: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      /* The array for storing all records fetched */\n      items: [],\n      /**\n       * Configure the GraphQL Client, setting headers\n       * only if the authTokenis specified.\n       */\n      client: new GraphQLClient(\n        this.endpoint,\n        this.authToken\n          ? {\n              headers: {\n                authorization: `Bearer ${this.authToken}`\n              }\n            }\n          : null\n      )\n    };\n  },\n  computed: {\n      respKeyParser() {\n          return this.respKey.split('.')\n      }\n  },\n  methods: {\n    /**\n     * Callback for the onscroll event checks whether the scroll position\n     * is near the bottom of the scroll container.\n     */\n    handleScroll({ target: { scrollTop, clientHeight, scrollHeight } }) {\n      if (scrollTop + clientHeight >= scrollHeight) this.loadBatch();\n    },\n    /**\n     * When a new batch of articles are retrieved from the API,\n     * add them to the items.\n     */\n    handleLoad(response) {\n      if (this.respKey) {\n          response = this.respKeyParser.reduce((o, v) => o[v], response)\n      }\n      this.items = this.items.concat(response);\n    },\n    /**\n     * Use the client to send query to GraphQL API\n     * with the needed variables, 'limit' and 'skip'.\n     */\n    loadBatch() {\n      this.client\n        .request(this.query, {\n          limit: this.limit,\n          skip: this.items.length\n        })\n        .then(this.handleLoad)\n        .catch(console.error);\n    }\n  },\n  /**\n   * When the component mounts (first renders), load the\n   * initial batch of posts.\n   */\n  mounted() {\n    this.loadBatch();\n  }\n};\n</script>\n"]}]}